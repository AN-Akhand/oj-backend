POST http://localhost:5000/users/getUser
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTU1NDgwLCJleHAiOjE2NDU1NTcyODB9.kHb-YqETUIFNt4366ASZv5VkxLVEK9s0-t-_dtKMPSY
Content-Type: application/json

{
    "handle": "unga"
}
###

GET http://localhost:5000/users/

###

GET http://localhost:5000/users/search
Content-Type: application/json

{
    "searchStr": "un"
}

###

POST http://localhost:5000/users/signup/
Content-Type: application/json

{
    "handle": "bunga",
    "name": "unga",
    "password": "Bleh",
    "email": null,
    "country": "Bangladesh",
    "institute": "TEUB"
}

###

POST http://localhost:5000/users/login/
Content-Type: application/json

{
    "handle": "unga",
    "pass": "Bleh"
}

###


GET http://localhost:5000/contests/contests

###
POST http://localhost:5000/contests/get
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NDQzNTUzLCJleHAiOjE2NDU0NDUzNTN9.mtzVUY8ALDKOLVZ4LN2rAESZhwx5W0C99dwQrEmRxfE
Content-Type: application/json

{
    "contestId": 81
}
###

POST http://localhost:5000/contests/create
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTE5MjA5LCJleHAiOjE2NDU1MjEwMDl9.QrG03_Waj7KJIXfBHpisIQ_s2ppwD4Oyvqd75ChCh6U
Content-Type: application/json

{
    "title": "something something something",
    "startTime": "1645522727150",
    "endTime": "1645526327150",
    "announcement": "sdsjdgfshjfbsdfbsdmnfsbjfeyfmsnfb snfsbnfsefnse sej sejfhbsnmf efhsb nsfshefbshjfbs sefj sjekfgs efse"
}

###

POST http://localhost:5000/contests/delete
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTQyMzE5LCJleHAiOjE2NDU1NDQxMTl9.DdWjgWkNOqo8KxfA8oqCbf7HDuq_qOWiWKC6R_Z0wEo
Content-Type: application/json

{
    "contestId": 90
}


###

POST http://localhost:5000/contests/generateResult
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTQzMjE3LCJleHAiOjE2NDU1NDUwMTd9.VeS0w9xKOQ4t77ATA4M-4k0ldRtcPQWxNM-H-WKTnIM
Content-Type: application/json

{
    "contestId": 91
}


###


GET http://localhost:5000/contests/search
Content-Type: application/json

{
  "searchStr": "a"
}


###

POST http://localhost:5000/problems/get
Content-Type: application/json

{
    "sortBy": "difficulty",
    "category": [
        "dynamic programming"
    ]
}
###


POST http://localhost:5000/problems/create
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTE5MjA5LCJleHAiOjE2NDU1MjEwMDl9.QrG03_Waj7KJIXfBHpisIQ_s2ppwD4Oyvqd75ChCh6U
Content-Type: application/json

{
    "contestId": 89,
    "name": "blah blah blah unga bunga",
    "problemID": "-1",
    "problemNo": "A",
    "timeLimit": 1,
    "difficulty": 1500,
    "memoryLimit": 512,
    "statement": "Your task is to place eight queens on a chessboard so that no two queens are attacking each other. As an additional challenge, each square is either free or reserved, and you can only place queens on the free squares. However, the reserved squares do not prevent queens from attacking each other.\r\n\r\n**How many possible ways are there to place the queens?**\r\n\r\n###Input\r\n\r\nThe input has eight lines, and each of them has eight characters. Each square is either free (.) or reserved (*).\r\n\r\n###Output\r\n\r\nPrint one integer: the number of ways you can place the queens.",
    "sampleInputs": [
        {
            "fileName": "sample_input.txt",
            "data": "........\r\n........\r\n..*.....\r\n........\r\n........\r\n.....**.\r\n...*....\r\n........"
        }
    ],
    "sampleOutputs": [
        {
            "fileName": "sample_output.txt",
            "data": "65"
        }
    ],
    "inputs": [
        {
            "fileName": "test_input (1).txt",
            "data": "........\n........\n........\n........\n........\n........\n........\n....*...\n"
        }
    ],
    "outputs": [
        {
            "fileName": "test_output (1).txt",
            "data": "74\n"
        }
    ],
    "category": [
        "Ad Hoc",
        "Dynamic Programming",
        "Math"
    ],
    "input": [
        {
            "key": 0,
            "ip": "........\r\n........\r\n..*.....\r\n........\r\n........\r\n.....**.\r\n...*....\r\n........"
        }
    ],
    "output": [
        {
            "key": 0,
            "op": "65"
        }
    ]
}

###


POST http://localhost:5000/problems/contestProblem
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJidW5nYSIsImlhdCI6MTY0NTQ0MTY2MSwiZXhwIjoxNjQ1NDQzNDYxfQ._sQGLS6p49SRBjpM-ULOk5-FIG5vlM3AULPuNBUxAq4
Content-Type: application/json

{
     "contestId": 81
}

###


GET http://localhost:5000/contests/getResult
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTQzMjE3LCJleHAiOjE2NDU1NDUwMTd9.VeS0w9xKOQ4t77ATA4M-4k0ldRtcPQWxNM-H-WKTnIM
Content-Type: application/json

{
     "contestId": 91
}

###

POST http://localhost:5000/problems/submit
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1MjAzNDAxLCJleHAiOjE2NDUyMDUyMDF9.2oJoOWNinIsmYihtBwAqrgOIXJ446wcB-6P9xrYkanU
Content-Type: application/json

{
  "contestId": 22,
  "problemId": "A",
  "code": "#inclde <bits/stdc++.h>\r\n// #include \"Edge.cpp\"\r\nusing namespace std;\r\n\r\nclass DijkstraVertex{\r\npublic:\r\n    int vertexNo;\r\n    int p;\r\n    long long int d;\r\n    DijkstraVertex(int vn){\r\n        vertexNo = vn;\r\n        p = -1;\r\n        d = LONG_LONG_MAX;\r\n    }\r\n    DijkstraVertex(){\r\n        vertexNo = -1;\r\n        p = -1;\r\n        d = LONG_LONG_MAX;\r\n    }\r\n    void print(){\r\n        cout<<\"Vertex No: \"<<vertexNo<<\", P: \"<<p<<\", D: \"<<d<<endl;\r\n    }\r\n};\r\nclass ascComparatorDijkVertex{\r\npublic:\r\n    bool operator() (const DijkstraVertex& v1, const DijkstraVertex& v2){\r\n        return v1.d > v2.d;\r\n    }\r\n};\r\n\r\nvector<DijkstraVertex> dijkstra(int n, const vector<vector<pair<int, long long int> > > & adj, int s){\r\n    vector<DijkstraVertex> vertex(n+1);\r\n    for(int i=0; i<=n; i++){\r\n        vertex[i].vertexNo = i;\r\n        vertex[i].d = LONG_LONG_MAX;\r\n        vertex[i].p = -1;\r\n    }\r\n    vertex[s].d = 0;\r\n    priority_queue<DijkstraVertex, vector<DijkstraVertex>, ascComparatorDijkVertex> q;\r\n    q.push(vertex[s]);\r\n    while(!q.empty()){\r\n        DijkstraVertex dv = q.top();\r\n        q.pop();\r\n\t\tif(vertex[dv.vertexNo].d < dv.d) continue;\r\n        // cout<<\"Popped: \";\r\n        // dv.print();\r\n        int size = adj[dv.vertexNo].size();\r\n        for(int i=0; i<size; i++){\r\n            if(vertex[adj[dv.vertexNo][i].first].d > dv.d + adj[dv.vertexNo][i].second){\r\n                vertex[adj[dv.vertexNo][i].first].d = dv.d + adj[dv.vertexNo][i].second;\r\n                vertex[adj[dv.vertexNo][i].first].p = dv.vertexNo;\r\n                // cout<<\"Pushing: \";\r\n                // vertex[adj[dv.vertexNo][i].first].print();\r\n                q.push(vertex[adj[dv.vertexNo][i].first]);\r\n            }\r\n        }\r\n    }\r\n    return vertex;\r\n}\r\n\r\nvoid printPath(vector<DijkstraVertex>& vertexes, int s, int t){\r\n    vector<int> path;\r\n    int tt = t;\r\n    while(vertexes[t].p != -1){\r\n        path.push_back(vertexes[t].p);\r\n        t = vertexes[t].p;\r\n    }\r\n    reverse(path.begin(), path.end());\r\n    int sz = path.size();\r\n    for(int i=0; i<sz; i++)cout<<path[i]<<\" -> \";\r\n    cout<<tt<<endl;\r\n}\r\n\r\nint main()\r\n{\r\n    int n, m;\r\n    cin>>n>>m;\r\n    vector<vector<pair<int, long long int> > > adj(n+1);\r\n    for(int i=0; i<m; i++){\r\n        int x, y;\r\n        long long int w;\r\n        cin>>x>>y>>w;\r\n        adj[x].push_back(make_pair(y, w));\r\n    }\r\n\r\n    // for(int i=0; i<n; i++){\r\n    //     cout<<i<<\": \";\r\n    //     for(int j=0; j<adj[i].size(); j++){\r\n    //         cout<<adj[i][j].first<<\"-\"<<adj[i][j].second<<\", \";\r\n    //     }\r\n    //     cout<<endl;\r\n    // }\r\n\r\n    int s, t;\r\n    // cin>>s>>t;\r\n    vector<DijkstraVertex> ans = dijkstra(n, adj, 1);\r\n    for(int i=1; i<=n; i++){\r\n        cout<<ans[i].d<<\" \";\r\n    }\r\n    // for(int i=0; i<n; i++){\r\n    //     ans[i].print();\r\n    // }\r\n    // cout<<\"Shortest path cost: \"<<ans[t].d<<endl;\r\n    // printPath(ans, s, t);\r\n}",
  "time": "1645184848074"
}

###

POST http://localhost:5000/problems/submission
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1MTM5ODU5LCJleHAiOjE2NDUxNDE2NTl9.p4gjdM_ywGjEpR1StyEl7mxkg_eWJ6zVwE63_z3rdzw
Content-Type: application/json

{
  "contestId": 69,
  "problemId": 3,
  "submissionId": 24
}


###



GET http://localhost:5000/problems/search
Content-Type: application/json

{
  "searchStr": "ch"
}


###


GET http://localhost:5000/problems/userSubmissions
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NDU4MzUzLCJleHAiOjE2NDU0NjAxNTN9.MybCZjUvOo0xVarKUHFk5N7-FxUnburn7xEXKmy8dl0



###


GET http://localhost:5000/blogs

###

POST http://localhost:5000/blogs/create-blog
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NDcwMTM4LCJleHAiOjE2NDU0NzE5Mzh9.oP9Ddi7QbKa_AVjNlLfpcTKms8RCsPZXdihfO5bxBv8
Content-Type: application/json

{
    "blogTitle": "Something",
    "blogBody": "Somsdfsdfsdfsdfdsgdfgdfgdfbvcbgfthfghfgh",
    "created": "1643462160277"
}


###



POST http://localhost:5000/blogs/create-tutorial
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTE5MjA5LCJleHAiOjE2NDU1MjEwMDl9.QrG03_Waj7KJIXfBHpisIQ_s2ppwD4Oyvqd75ChCh6U
Content-Type: application/json

{
    "blogTitle": "SomeTutorial",
    "blogBody": "Somsdfsdfsdfsdfdsgdfgdfgdfbvcbgfthfghfgh",
    "created": "1643462160277",
    "contestId": 89,
    "problemId": "A"
}

### 

GET http://localhost:5000/blogs/get/87
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NDc0NjQ0LCJleHAiOjE2NDU0NzY0NDR9.JarIe7j2r-16IiDctz1L-tLykbmFl0XIU4pLgLhdMe8
###

POST http://localhost:5000/blogs/comment
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTI3MzYyLCJleHAiOjE2NDU1MjkxNjJ9.6XX84OWemKzD99pgA2RKVqVyrjxBAfZErHOIOhP60kM
Content-Type: application/json

{
    "blogId": 92,
    "comment": "sdfsdfsdvvrrgdf efsfsdfds",
    "time": "1643462160277"
}

###


GET http://localhost:5000/blogs/getComments/92
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTI3MzYyLCJleHAiOjE2NDU1MjkxNjJ9.6XX84OWemKzD99pgA2RKVqVyrjxBAfZErHOIOhP60kM


###

GET http://localhost:5000/blogs/getUserBlogs
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1NTQ5MDM4LCJleHAiOjE2NDU1NTA4Mzh9.9J_Ac-a0kC4wi-ZttjWF39s7VTMbYx4WADm_wudri18
Content-Type: application/json

{
    "handle": "unga"
}



###


GET http://localhost:5000/blogs/search
Content-Type: application/json

{
  "searchStr": "some"
}


###


POST http://localhost:5000/problems/problemDetail
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJoYW5kbGUiOiJ1bmdhIiwiaWF0IjoxNjQ1MTM5ODU5LCJleHAiOjE2NDUxNDE2NTl9.p4gjdM_ywGjEpR1StyEl7mxkg_eWJ6zVwE63_z3rdzw
Content-Type: application/json

{
    "contestId": 69,
    "problemId": 1
}